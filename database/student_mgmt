-- Student Management System Database Schema
-- XAMPP Default: host=localhost, user=root, password="", db=student_mgmt

DROP TABLE IF EXISTS attendance;
DROP TABLE IF EXISTS timetable;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS students;
DROP TABLE IF EXISTS leave_requests;
DROP TABLE IF EXISTS onduty_requests;
DROP TABLE IF EXISTS disciplinary_actions;
DROP TABLE IF EXISTS marks;
DROP TABLE IF EXISTS subjects;
DROP TABLE IF EXISTS classes;
DROP TABLE IF EXISTS departments;
DROP TABLE IF EXISTS settings;

-- Users table for authentication (created first to avoid foreign key issues)
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    role ENUM('Admin', 'DeptAdmin', 'HOD', 'Teacher', 'Student') NOT NULL,
    full_name VARCHAR(100) NOT NULL,
    department_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Departments table
CREATE TABLE departments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    department_name VARCHAR(100) NOT NULL,
    description TEXT,
    hod_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (hod_id) REFERENCES users(id) ON DELETE SET NULL
);

-- Add foreign key constraint to users table after departments table is created
ALTER TABLE users ADD CONSTRAINT fk_user_department FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL;

-- Classes table
CREATE TABLE classes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    class_name VARCHAR(50) NOT NULL,
    section VARCHAR(10) NOT NULL,
    academic_year VARCHAR(20) NOT NULL,
    department_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Add foreign key constraint to classes table after departments table is created
ALTER TABLE classes ADD CONSTRAINT fk_class_department FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL;

-- Subjects table
CREATE TABLE subjects (
    id INT AUTO_INCREMENT PRIMARY KEY,
    subject_name VARCHAR(100) NOT NULL,
    subject_code VARCHAR(20) UNIQUE NOT NULL,
    class_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE
);

-- Students table
CREATE TABLE students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id VARCHAR(20) UNIQUE NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    date_of_birth DATE,
    gender ENUM('Male', 'Female', 'Other'),
    address TEXT,
    class_id INT,
    parent_name VARCHAR(100),
    parent_phone VARCHAR(15),
    admission_date DATE,
    status ENUM('Active', 'Inactive', 'Graduated') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE SET NULL
);

-- Leave requests table
CREATE TABLE leave_requests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    leave_type ENUM('Medical', 'Personal', 'Emergency') NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    reason TEXT NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    approved_by INT,
    approved_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (approved_by) REFERENCES users(id) ON DELETE SET NULL
);

-- On-duty requests table
CREATE TABLE onduty_requests (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    event_name VARCHAR(200) NOT NULL,
    event_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    venue VARCHAR(200),
    reason TEXT NOT NULL,
    status ENUM('Pending', 'Approved', 'Rejected') DEFAULT 'Pending',
    approved_by INT,
    approved_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (approved_by) REFERENCES users(id) ON DELETE SET NULL
);

-- Disciplinary actions table
CREATE TABLE disciplinary_actions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    action_type ENUM('Warning', 'Suspension', 'Expulsion', 'Detention') NOT NULL,
    description TEXT NOT NULL,
    action_date DATE NOT NULL,
    imposed_by INT NOT NULL,
    status ENUM('Active', 'Resolved', 'Expired') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (imposed_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Marks table
CREATE TABLE marks (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    subject_id INT NOT NULL,
    exam_type ENUM('Quiz', 'Midterm', 'Final', 'Assignment', 'Project') NOT NULL,
    marks_obtained DECIMAL(5,2) NOT NULL,
    total_marks DECIMAL(5,2) NOT NULL,
    exam_date DATE NOT NULL,
    remarks TEXT,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE,
    FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE
);

-- Timetable table
CREATE TABLE timetable (
    id INT AUTO_INCREMENT PRIMARY KEY,
    class_id INT NOT NULL,
    subject_id INT NOT NULL,
    teacher_id INT,
    day_of_week ENUM('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday') NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    room VARCHAR(50),
    academic_year VARCHAR(20) NOT NULL,
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Add foreign key constraints to timetable table
ALTER TABLE timetable ADD CONSTRAINT fk_timetable_class FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE;
ALTER TABLE timetable ADD CONSTRAINT fk_timetable_subject FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE CASCADE;
ALTER TABLE timetable ADD CONSTRAINT fk_timetable_teacher FOREIGN KEY (teacher_id) REFERENCES users(id) ON DELETE SET NULL;
ALTER TABLE timetable ADD CONSTRAINT fk_timetable_created_by FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE CASCADE;

-- Attendance table
CREATE TABLE attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    class_id INT NOT NULL,
    subject_id INT,
    attendance_date DATE NOT NULL,
    status ENUM('Present', 'Absent', 'Late', 'Excused') NOT NULL,
    remarks TEXT,
    marked_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY unique_attendance (student_id, class_id, attendance_date, subject_id)
);

-- Add foreign key constraints to attendance table
ALTER TABLE attendance ADD CONSTRAINT fk_attendance_student FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE;
ALTER TABLE attendance ADD CONSTRAINT fk_attendance_class FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE;
ALTER TABLE attendance ADD CONSTRAINT fk_attendance_subject FOREIGN KEY (subject_id) REFERENCES subjects(id) ON DELETE SET NULL;
ALTER TABLE attendance ADD CONSTRAINT fk_attendance_marked_by FOREIGN KEY (marked_by) REFERENCES users(id) ON DELETE CASCADE;

-- Settings table
CREATE TABLE settings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    description TEXT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Insert sample departments first
INSERT INTO departments (id, department_name, description) VALUES
(1, 'Computer Science', 'Computer Science and Information Technology Department'),
(2, 'Mathematics', 'Mathematics and Statistics Department'),
(3, 'Science', 'Physics, Chemistry, and Biology Department'),
(4, 'English', 'English Language and Literature Department'),
(5, 'Commerce', 'Commerce and Business Studies Department');

-- Insert default admin user
INSERT INTO users (username, password, email, role, full_name) VALUES 
('admin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin@school.com', 'Admin', 'System Administrator');

-- Insert department admin user
INSERT INTO users (username, password, email, role, full_name) VALUES 
('deptadmin', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'deptadmin@school.com', 'DeptAdmin', 'Department Administrator');

-- Insert sample HOD users for each department
INSERT INTO users (username, password, email, role, full_name, department_id) VALUES 
('hod_cse', 'scsvmv123*', 'hod.cse@school.com', 'HOD', 'HOD Computer Science', 1),
('hod_math', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'hod.math@school.com', 'HOD', 'HOD Mathematics', 2),
('hod_science', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'hod.science@school.com', 'HOD', 'HOD Science', 3),
('hod_english', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'hod.english@school.com', 'HOD', 'HOD English', 4),
('hod_commerce', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'hod.commerce@school.com', 'HOD', 'HOD Commerce', 5);

-- Insert default settings
INSERT INTO settings (setting_key, setting_value, description) VALUES 
('school_name', 'ABC School', 'Name of the school'),
('school_address', '123 Education Street, City, State', 'School address'),
('academic_year', '2024-2025', 'Current academic year'),
('max_leave_days', '30', 'Maximum leave days per student per year'),
('attendance_threshold', '75', 'Minimum attendance percentage required');

-- Insert sample departments
INSERT INTO departments (department_name, description) VALUES 
('Computer Science', 'Computer Science and Information Technology Department'),
('Mathematics', 'Mathematics and Statistics Department'),
('Science', 'Physics, Chemistry, and Biology Department'),
('English', 'English Language and Literature Department'),
('Commerce', 'Commerce and Business Studies Department');

-- Insert sample classes
INSERT INTO classes (class_name, section, academic_year, department_id) VALUES 
('Class 1', 'A', '2024-2025', 1),
('Class 1', 'B', '2024-2025', 1),
('Class 2', 'A', '2024-2025', 2),
('Class 2', 'B', '2024-2025', 2),
('Class 3', 'A', '2024-2025', 3),
('Class 3', 'B', '2024-2025', 3);

-- Insert sample subjects
INSERT INTO subjects (subject_name, subject_code, class_id) VALUES 
('Mathematics', 'MATH101', 1),
('English', 'ENG101', 1),
('Science', 'SCI101', 1),
('Mathematics', 'MATH201', 2),
('English', 'ENG201', 2),
('Science', 'SCI201', 2),
('Mathematics', 'MATH301', 3),
('English', 'ENG301', 3),
('Science', 'SCI301', 3);

